;;
(defwidget bar []
  (centerbox :orientation "v" :hexpand false
    (box :space-evenly false :valign "start" :halign "center" :vexpand true :hexpand false :orientation "v" :spacing 10
      (launch)
      (box :class "system-status" :orientation "v" :spacing 10 :hexpand false :active false :vexpand false
      (mem)
      (cpu)
      (disk)
      (volume)
        )
      (wifi)
      )

    (workspaces :halign "center" :vexpand true :hexpand false :orientation "v")

    (box :valign "end" :hexpand false :vexpand true :orientation "v" :space-evenly false :spacing 10
      (battery)
      (time)
      ))
  )

(defpoll battery :interval "2s" "./scripts/battery.sh")

;; Variables
(defpoll temperature :interval "20m" "curl -s 'wttr.in/?format=%f'")

(defpoll wifi :interval "3s" "./scripts/wifi.sh")
(defpoll hour :interval "10s" "date +%H")
(defpoll minute :interval "10s" "date +%M")
(defpoll dateVar :interval "600s" "date '+%A %d.%m.%y'")
(deflisten workspaces_listen "./scripts/workspaces.sh")

(defvar search false)
(defvar time false)
(defvar cal false)

;; Widgets
;;the three widgets on the together on the top of the bar
(defwidget mem []
  (box :vexpand "false" :hexpand "false"
    (circular-progress  :value {EWW_RAM.used_mem_perc}
                        :class "membar"
                        :start-angle 0
                        :thickness 4
      (button
        :class "iconmem"
        :limit-width 2
        :tooltip " ${round(EWW_RAM.used_mem_perc,1)}%"
        :show_truncated false
        :wrap false
        "")
      ))
  )

(defwidget cpu []
  (box :vexpand "false" :hexpand "false"
    (circular-progress  :value {EWW_CPU.avg}
                        :class "cpubar"
                        :start-angle 0
                        :thickness 4
      (button
        :class "iconmem"
        :limit-width 2
        :tooltip " ${round(EWW_CPU.avg,1)}%"
        :show_truncated false
        :wrap false
        "")
      ))
  )
(defwidget disk []
  (box :vexpand "false" :hexpand "false"
    (circular-progress  :value {EWW_DISK["/"].used_perc}
                        :class "diskbar"
                        :start-angle 0
                        :thickness 4
      (button
        :class "iconmem"
        :limit-width 2
        :tooltip " ${round(EWW_DISK["/"].used_perc,1)}%"
        :show_truncated false
        :wrap false
        "")
      ))
  )

(defwidget wifi []
 (box :vexpand false :hexpand false :orientation "v"
   (label :text {wifi.icon}
          :limit-width 10
          :tooltip {wifi.status}
          :class "label wifi")

   )
)

(defwidget battery []
 (box :vexpand false :hexpand false :orientation "v" :visible {battery.visible}
   (label :text "${battery.icon}"
          :limit-width 10
          :tooltip "${battery.percent}% ${battery.charging}"
          :class "label battery")

   )
)


(defpoll current-volume :interval "1s" "pamixer --get-volume")
(defwidget volume []
  (box :vexpand "false" :hexpand "false"
    (circular-progress
      :value current-volume
      :class "volumebar"
      :start-angle 0
      :thickness 4
      )))



(defwidget time []
  (eventbox :cursor "hand"  :hexpand false :vexpand false
                :tooltip "${dateVar}"
    (box :orientation "v" :hexpand false :vexpand false :space-evenly false :class "clock"
    (button		:class "date"
                :orientation "v"
                :onclick "eww open --toggle calendar"	"${hour}")

    (button		:class "date"
                :orientation "v"
                :onclick "eww open --toggle calendar"	"${minute}")
    )
    )
  )



(defwidget launch []
  (button		:class "icon nixos"
                :hexpand true
                :onclick "rofi -show drun &"	"")
)

(defwidget workspaces []
  (literal :content workspaces_listen))


(defwindow calendar
  :geometry (geometry :x "-20px"
  :y "7%"
  :width "270px"
  :height "60px"
  :anchor "top right")
  (calendar :class "cal")
  )
(defwindow bar
  :monitor 0
  :reserve (struts :distance "55px" :side "left")
  :geometry (geometry :height "98%" :x "6px" :y "10px"
  :width "50px"
  :anchor "top left")
  :hexpand false
  :stacking "bg"
  :vexpand false
  :wm-ignore false
  (bar))
